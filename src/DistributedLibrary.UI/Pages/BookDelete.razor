@page "/books/{BookId:int}/delete/"
@using DistributedLibrary.UI.Auth
@using DistributedLibrary.Services.Services
@using DistributedLibrary.Services.Dto
@using DistributedLibrary.Shared.Dto
@using DistributedLibrary.Shared.Enums


@inject UserInfoProvider _userInfoProvider
@inject NavigationManager NavigationManager
@inject LibraryService _libraryService
@attribute [Authorize]

@if (_book == null)
{
    <p>There is no book with id @BookId.</p>
}
else
{
    <div class="form-horizontal">
        @if (_message != null)
        {
            <ul class="validation-errors">
                <li class="validation-message">@_message</li>
            </ul>
        }
        <div class="form-group">
            <div class="col-md-5">Do you really want to delete book '@_book.Title'?</div>
        </div>

        <div class="form-group">
            <div class="col-md-5">

                <button type="submit" class="btn btn-primary btn-md" @onclick="DeleteAsync">Delete</button>
                <button type="button" class="btn btn-primary btn-md" @onclick="Back">Cancel</button>
            </div>
        </div>
    </div>
}


@code {
    private BookDto? _book;

    private string? _message;

    [Parameter]
    public int BookId { get; set; }

    [Parameter]
    public string Title { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        var response = await _libraryService.GetBookAsync(BookId);

        ProcessResponse(response, x => _book = x);
    }

    private async Task DeleteAsync()
    {
        var userId = await _userInfoProvider.GetUserIdAsync();
        var response = await _libraryService.DeleteBookAsync(BookId, userId);

        ProcessResponse(response);

        if (response.ResponseState == ResponseState.Ok)
        {
            Back();
        }
    }

    private void ProcessResponse<T>(ResponseDto<T> response, Action<T?>? assignment = null) where T: class?
    {
        if (response.ResponseState != ResponseState.Ok)
        {
            _message = response.GetMessage();

            assignment?.Invoke(null);
            StateHasChanged();
            return;
        }

        _message = null;
        assignment?.Invoke(response.Result);
     
        StateHasChanged();
    }


    private void ProcessResponse(ResponseDto response)
    {
        if (response.ResponseState != ResponseState.Ok)
        {
            _message = response.GetMessage();
            StateHasChanged();
            return;
        }

        _message = null;
        StateHasChanged();
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/books/");
    }
}
